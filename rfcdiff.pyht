<?python # -*- html -*-
    import re, os, time, string, stat, sys, syslog, json
    try:
        from raw2event import attrib
    except ImportError:
        class Attrib():
            readline = lambda x: {}
        attrib = Attrib()

    pid   = os.getpid()
    path  = os.path.realpath(".")
    tool  = os.path.basename(path)
    Tool  = string.capitalize(tool)

    syslog.openlog('rfcdiff', syslog.LOG_PID, syslog.LOG_USER)
    def note(msg):
        import syslog
        syslog.syslog(syslog.LOG_INFO, msg)
    def warn(msg):
        import syslog
        syslog.syslog(syslog.LOG_WARNING, msg)

    # Handle possible uploaded files.

    uploadmsg = ""
    filename1 = None
    filename2 = None
    linecount1 = 0
    linecount2 = 0
    uploadsrc1 = ""
    uploadsrc2 = ""
    src1_metadata = dict()
    src2_metadata = dict()
    uploadfile = None
    info = ""
    debuginfo = ""
    errors = ""

    tmp_dir = os.environ.get("RFCDIFF_TMP_DIR","/a/tmp")

    def norm(url):
        import urlparse
        # Normalize scheme, to avoid complaints for redirects from http to https
        scheme, host, path, query, fragment = urlparse.urlsplit(url)
        if scheme == 'https':
            scheme = 'http'
        return (scheme, host, path, query, fragment)

    def get_metadata(name, warn_fn):
        import os, json, urllib2 
        metadata_base_url = os.environ.get("RFCDIFF_METADATA_BASE_URL","https://datatracker.ietf.org/doc/rfcdiff-latest-json/")
        url = metadata_base_url+urllib2.quote(name)
        metadata = dict()
        msg = ""
        try:
            response = urllib2.urlopen(url, timeout=20)
            metadata = json.load(response)             
        except:
            uploadmsg = "Couldn't fetch metadata from %s" % url
            warn_fn(uploadmsg)
            msg = "Couldn't fetch metadata for %s. " % name
        return msg, metadata
    for a in args:
        if not a in ["url1", "url2", "filename1", "filename2", "difftype",
                     "--width", "--oldcolour", "--newcolour", "--larger",
                     "--fold", "submit", ]:
            errors += "Unexpected query parameter: <b>%s</b><br>" % a

    if "filename2" in args or "url2" in args:
        if "filename2" in args and len(args["filename2"]) > 0:
            uploadsrc2 = form["filename2"].filename
        elif "url2" in args and type(args["url2"]) is str and len(args["url2"]) > 0:
            uploadsrc2 = args["url2"].split('?',1)[0]
            if uploadsrc2.startswith("draft-") or uploadsrc2.lower().startswith("rfc"):
                msg, src2_metadata = get_metadata(uploadsrc2, warn)
                if msg:
                    info += msg
                if "content_url" in src2_metadata:
                    uploadsrc2 = src2_metadata["content_url"]
        if not uploadsrc2:
            uploadmsg = "Upload failed - no source file name for file 2."
    note("diff source 2: %s" % uploadsrc2)

    if "filename1" in args or "url1" in args or uploadsrc2:
        if "filename1" in args and len(args["filename1"]) > 0:
            uploadsrc1 = form["filename1"].filename
        elif "url1" in args and type(args["url1"]) is str and len(args["url1"]) > 0:
            uploadsrc1 = args["url1"].split('?',1)[0]
            if uploadsrc1.startswith("draft-") or uploadsrc1.lower().startswith("rfc"):
                msg, src1_metadata = get_metadata(uploadsrc1, warn)
                if msg:
                    info += msg
                if "content_url" in src1_metadata:
                    uploadsrc1 = src1_metadata["content_url"]
                if not uploadsrc2:
                    match = re.match("(.*-)([0-9][0-9])(\..*)", uploadsrc1)
                    if match:
                        rev = int(match.group(2))
                        uploadsrc2= "%s%02d%s" % (match.group(1), rev+1, match.group(3))
                        uploadmsg = ""
        elif src2_metadata and "previous" in src2_metadata:
            uploadsrc1 = src2_metadata["previous"]
            msg, src1_metadata = get_metadata(uploadsrc1, warn)
            if msg:
                info += msg
            if "content_url" in src1_metadata:
                uploadsrc1 = src1_metadata["content_url"]

        note("diff source 1: %s" % uploadsrc1)

        if uploadsrc1:
            uploadname = basename(re.sub("\\\\","/", uploadsrc1))
            if re.match("^[a-zA-Z0-9_.,-]*$", uploadname):
                if uploadsrc1.startswith("http://") or uploadsrc1.startswith("https://") or uploadsrc1.startswith("ftp://"):
                    try:
                        import httplib, urllib2
                        uploadfile = urllib2.urlopen(uploadsrc1, timeout=20)
                    except:
                        uploadmsg = "Couldn't retrieve file 1 (%s) - please check the URL." % uploadsrc1
                        warn(uploadmsg)
                    if uploadfile and re.search("-[0-9][0-9](\.txt)?$", uploadsrc1) and norm(uploadsrc1) != norm(uploadfile.geturl()):
                        uploadmsg = "Couldn't retrieve file 1 (%s) - got a redirect to '%s' instead." % (uploadsrc1, uploadfile.geturl())
                        warn(uploadmsg)
                        uploadfile = None
                elif "filename1" in args and form["filename1"].file:
                    uploadfile = form["filename1"].file
                else:
                    uploadmsg = "Couldn't retrieve file 1 (%s) - unknown URL format." % uploadsrc1
                    warn(uploadmsg)
                if uploadname and uploadfile:
                    if not hasattr(uploadfile, "info") or uploadfile.info()["content-type"].startswith("text/plain"):
                        uploaddir1 = os.path.join(os.path.join(tmp_dir, "1"), "%d"%pid)
                        if not os.path.exists(uploaddir1):
                                os.makedirs(uploaddir1)
                        uploadname = os.path.join(uploaddir1, uploadname)
                        outputfile = open(uploadname, "w")
                        while linecount1 < 64000: # arbitrary number of lines
                            line = uploadfile.readline()
                            if not line: break
                            # try to handle files with mac line endings well:
                            for l in line.rstrip("\n\r").split("\r"):
                                outputfile.write(l.rstrip("\n\r"))
                                outputfile.write("\n")
                                linecount1 += 1
                        outputfile.close()
                        os.chmod(uploadname, 0666)
                        filename1 = uploadname
                        if not linecount1:
                            uploadmsg = "File 1 seems to be empty"
                    else:
                        uploadmsg = "The mime-type of file 1 is '%s', but 'text/plain' was expected" % uploadfile.info()["content-type"]
                        warn(uploadmsg)
            else:
                uploadmsg = "Upload aborted, got (%s) but a text file without odd characters in the name is expected here." % uploadname
        else:
            uploadmsg = "Upload failed - no source file name for file 1"

        if uploadsrc2:
            uploadname = basename(re.sub("\\\\","/", uploadsrc2))
            if re.match("^[a-zA-Z0-9_.,-]*$", uploadname):
                if uploadsrc2.startswith("http://") or uploadsrc2.startswith("https://") or uploadsrc2.startswith("ftp://"):
                    try:
                        import httplib, urllib2
                        uploadfile = urllib2.urlopen(uploadsrc2, timeout=20)
                    except:
                        uploadmsg = "Couldn't retrieve file 2 (%s) - please check the URL." % uploadsrc2
                        warn(uploadmsg)
                    if uploadfile and re.search("-[0-9][0-9](\.txt)?$", uploadsrc2) and norm(uploadsrc2) != norm(uploadfile.geturl()):
                        uploadmsg = "Couldn't retrieve file 2 (%s) - got a redirect to '%s'." % (uploadsrc2, uploadfile.geturl())
                        warn(uploadmsg)
                        uploadfile = None
                            
                elif "filename2" in args and form["filename2"].file:
                    uploadfile = form["filename2"].file
                else:
                    uploadmsg = "Couldn't retrieve file 2 (%s) - unknown URL format." % uploadsrc2
                    warn(uploadmsg)
                    
                if uploadname and uploadfile:
                    if not hasattr(uploadfile, "info") or uploadfile.info()["content-type"].startswith("text/plain"):
                        uploaddir2 = os.path.join(os.path.join(tmp_dir,"2"), "%d"%pid )
                        if not os.path.exists(uploaddir2):
                                os.makedirs(uploaddir2)
                        uploadname = os.path.join(uploaddir2, uploadname)
                        outputfile = open(uploadname, "w")
                        while linecount2 < 64000:
                            line = uploadfile.readline()
                            if not line: break
                            # try to handle files with mac line endings well:
                            for l in line.rstrip("\n\r").split("\r"):
                                outputfile.write(l.rstrip("\n\r"))
                                outputfile.write("\n")
                                linecount2 += 1
                        outputfile.close()
                        if not linecount2:
                            uploadmsg = "File 2 seems to be empty..."
                        os.chmod(uploadname, 0666)
                        filename2 = uploadname
                    else:
                        uploadmsg = "The mime-type of file 2 is '%s', but 'text/plain' was expected" % uploadfile.info()["content-type"]
            else:
                uploadmsg = "Upload aborted, got (%s) but a text file without odd characters in the name is expected here." % uploadname

    # argument cleaning
    if "--width" in args and args["--width"].isdigit():
        width = "--width "+args["--width"]
    else:
        width=""

    # argument cleaning
    if "--fold" in args and args["--fold"].isdigit():
        fold = "--fold "+args["--fold"]
    else:
        fold=""

    colours = [ "aqua", "black", "blue", "fuchsia", "gray", "green", "lime", "maroon", "navy", "olive", "orange", "purple", "red", "silver", "teal", "white", "yellow"]
    if "--oldcolour" in args and args["--oldcolour"] in colours:
        oldcolour = "--oldcolour "+args["--oldcolour"]
    else:
        oldcolour = ""

    if "--newcolour" in args and args["--newcolour"] in colours:
        newcolour = "--newcolour "+args["--newcolour"]
    else:
        newcolour = ""

    difftypes = ["html", "chbars", "diff", "wdiff", "hwdiff", "abdiff" ]
    difftype = ""
    if "difftype" in args:
        if type(args["difftype"]) == type([]):
            args["difftype"] = args["difftype"][0]
        if args["difftype"].lstrip('-') in difftypes:
            difftype = args["difftype"]

    if "--larger" in args:
        larger = "--larger"
    else:
        larger = ""


    if debuginfo: out("\n\n<script type='text/javascript' language='JavaScript1.1'>alert(\"%s\");</script>" % (debuginfo.replace('"','\\"')))
    if not (info or errors) and filename1 and filename2 and linecount1 and linecount2:
        uploadmsg = "Upload complete."
        if difftype in ("--abdiff", "--chbars"):
            print("Content-Type: text/plain\n\n")
        else:
            print("Content-Type: text/html\n\n")

        os.system("./rfcdiff --stdout --links %s %s %s %s %s %s %s %s" % (fold, width, difftype, oldcolour, newcolour, larger, filename1, filename2))
        if filename1.startswith('/a/tmp/1/'):
            os.unlink(filename1)
#            os.rmdir(uploaddir1)
        if filename2.startswith('/a/tmp/2/'):
            os.unlink(filename2)
#            os.rmdir(uploaddir2)
        sys.exit(0)

?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
  <title><?python tool ?></title>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
</head>
<body >
<div class="page">
   <table border="0" width="100%" >
      <tr>
         <!-- Left column -->
         <?python
           virtualinc("/inc/narrow-menu.pyht")
         ?>
         <!--#include virtual="/inc/narrow-menu.html" -->
         <!-- Right column -->
         <td valign="top">
            <div class="content">

               <div>
                  <!-- Caption -->
                  <table width="100%">
                     <tr>
                        <td rowspan="2">
                           <h2 align="left">Rfcdiff Tool</h2>
                           <i></i>
                        </td>

                        <td class="version" style="color: black; font-size:11pt;">
                        </td>
                     </tr>
                     <tr>
                        <!-- left column inherited from previous row -->
                        <td class="chairs">
                        </td>
                     </tr>
                  </table>
                  <b>
                  </b>
               </div>
               <hr/>


               <h3>Rfcdiff Web Service</h3>
               <?python
                  if errors:
                      out("<div style='background-color: #F88;'>%s</div>" % errors)
               ?>
               <form action="" method="post" enctype="multipart/form-data">
                  <table border="0" cellpadding="8" cellspacing="0" >
                     <tbody>
                        <tr valign="top">
                           <td>File 1 - &nbsp;</td>
                           <td>Upload file: &nbsp; </td>
                           <td><input name="filename1" type="file" size="40"></td>
                        </tr>
                        <tr>
                           <td />
                           <td>or enter URL or draft name:  &nbsp; </td>
                           <td><input name="url1" id="url1" type="text" size="50"></td>
                        </tr>
                        <tr><td colspan="3">&nbsp;</td></tr>
                        <tr valign="top">
                           <td>File 2 - &nbsp;</td>
                           <td>Upload file: &nbsp; </td>
                           <td><input name="filename2" type="file" size="40"></td>
                        </tr>
                        <tr>
                           <td />
                           <td>or enter URL or draft name:  &nbsp; </td>
                           <td><input name="url2" id="url2" type="text" size="50"></td>
                        </tr>
                        <tr><td colspan="3">&nbsp;</td></tr>
                        <tr valign="top">
                           <td colspan="2">Output format:</td>
                           <td>
                              <input name="difftype" value="--html" checked="checked" type="radio">Side-by-side diff<br>
                              <input name="difftype" value="--abdiff" type="radio">Before-after diff<br>
                              <input name="difftype" value="--chbars" type="radio">Changebars<br>
                              
                              <input name="difftype" value="--hwdiff" type="radio">Html wdiff<br>
                              <table>
                                <tr valign="top"><td width="16"></td><td colspan="2">Html Wdiff Options:</td><tr>
                                <tr><td/><td>Colour of old text: </td><td><input name="--oldcolour" value="red" type="text"></td></tr>
                                <tr><td/><td>Colour of new text: </td><td><input name="--newcolour" value="green" type="text">           </td></tr>
                                <tr><td/><td>Larger diff text:   </td><td><input name="--larger" type="checkbox">           </td></tr>
                              </table>
                           </td>
                        </tr>
                        <tr valign="top">
                           <td colspan="2">Column width:</td>
                           <td><input name="--width" size="4" type="text"></td>
                        </tr>

                        <tr><td></td></tr>
                        <tr valign="top">
                           <td colspan="2">Fold lines:</td>
                           <td><input name="--fold" size="4" type="text"></td>
                        </tr>

                        <tr>
                           <td colspan="3" align="right">
                              <input name="submit" value="Generate diff" type="submit">
                           </td>
                        </tr>
                     </tbody></table>

               </form>

               <div style="margin: 2em;">
                  <p>
                     You can also use this web-service with an URL query-string of the form:
                  </p>
                  <p>
                     <tt><small><?python urlpath+"/"+basename(urlname) ?>?url1=<i>http-url-to-doc-1</i>&amp;url2=<i>http-url-to-doc-2</i></small></tt>
                  </p>
                  <p>
                     which makes it possible to send around links to diffs between document
                     versions withouth actually generating the diff yourself, as long as the two
                     document versions are available by http.
                  </p>
                  <p>
                     Example (yes, it is long - no way to get around that... - but you could use <a href="https://tinyurl.com/">tinyurl.com</a> to get a short alias to one of these):
                  </p>
                  <p>

                     <a href="<?python 'https://'+servername+urlname ?>?url1=https://www.ietf.org/archive/id/draft-ietf-atompub-format-10.txt&url2=https://www.ietf.org/archive/id/draft-ietf-atompub-format-11.txt"><?python "https://"+servername+urlname ?>?<br/>
                        &nbsp;&nbsp;url1=https://www.ietf.org/archive/id/draft-ietf-atompub-format-10.txt<br/>
                        &nbsp;&nbsp;&amp;url2=https://www.ietf.org/archive/id/draft-ietf-atompub-format-11.txt</a>

                  </p>
               </div>
            </div>
            <br/>
            <br/>
            <br/>
         </td>
      </tr>
   </table>


  <table width="100%" style="margin-top: 10em;">
    <tr valign="bottom">
      <td style=" font-size: 9pt; font-style: italic; text-align: left; ">Generated using the PyHt script  <a href="<?python urlname ?>?showcode=1"><?python urlname ?></a></td>
      <td style=" font-size: 9pt; font-style: italic; text-align: right; ">Latest update: <?python filedate() ?> </td>
    </tr>
  </table>
  <?python
    if uploadmsg or info: out("<script type='text/javascript' language='JavaScript1.1'>alert(\"%s\");</script>" % (uploadmsg+". "+info).replace('"','\\"'))
  ?>
</div>
</body>
</html>
